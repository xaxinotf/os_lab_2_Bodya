#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define PHILOSOPHER_COUNT 5

pthread_mutex_t forks[PHILOSOPHER_COUNT];

void* philosopher(void* num) {
    int philosopher_number = *(int*)num;
    int left_fork = philosopher_number;
    int right_fork = (philosopher_number + 1) % PHILOSOPHER_COUNT;

    if (philosopher_number == 0) {
        // Змінюємо порядок для одного філософа, щоб уникнути deadlock
        left_fork = (philosopher_number + 1) % PHILOSOPHER_COUNT;
        right_fork = philosopher_number;
    }

    while (1) {
        printf("Філософ %d думає.\n", philosopher_number);

        pthread_mutex_lock(&forks[left_fork]);
        printf("Філософ %d взяв ліву виделку.\n", philosopher_number);

        if (pthread_mutex_trylock(&forks[right_fork]) == 0) {
            printf("Філософ %d взяв праву виделку і починає їсти.\n", philosopher_number);

            sleep(1);
            // Філософ їсть
            pthread_mutex_unlock(&forks[right_fork]);
            printf("Філософ %d поклав праву виделку.\n", philosopher_number);
        } else {
            // Не вдалося взяти праву виделку, повертаємо ліву
            pthread_mutex_unlock(&forks[left_fork]);
            printf("Філософ %d не може взяти праву виделку і повертає ліву.\n", philosopher_number);
        }

        pthread_mutex_unlock(&forks[left_fork]);
        printf("Філософ %d поклав ліву виделку і знову думає.\n", philosopher_number);

        // Введення випадкової паузи для запобігання livelock
        usleep(rand() % 100000);  // Пауза від 0 до 100 мілісекунд
    }

    return NULL;
}

int main() {
    pthread_t philosophers[PHILOSOPHER_COUNT];
    int philosopher_numbers[PHILOSOPHER_COUNT];

    for (int i = 0; i < PHILOSOPHER_COUNT; ++i) {
        pthread_mutex_init(&forks[i], NULL);
        philosopher_numbers[i] = i;
    }

    for (int i = 0; i < PHILOSOPHER_COUNT; ++i) {
        pthread_create(&philosophers[i], NULL, philosopher, (void*)&philosopher_numbers[i]);
    }

    for (int i = 0; i < PHILOSOPHER_COUNT; ++i) {
        pthread_join(philosophers[i], NULL);
    }

    for (int i = 0; i < PHILOSOPHER_COUNT; ++i) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
